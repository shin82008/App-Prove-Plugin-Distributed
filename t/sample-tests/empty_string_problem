
=head1 DESCRIPTION

The test below will fail if run using the App::Prove::Plugin::Distributed plugin.  The reason is documented below.

2)  Empty string matches problem.  Shown below is the example code that illustrate the problem.
    "ok('test' =~ m//)" will failed if the previous regular expression has a "?" follow by any character. 
    Currently, I do not know a way to reset it back previous state before running the empty string regular expression.

    ...

    ok('good=bad' =~ m/^.*?=.*/, 'test');

    ok('test' =~ m//, 'this will failed before the previous regex match with a "?=" regex match. I have no way to reset back the previous regex change the regex engine unless I put it in its scope.');

    ...


If I put it in its scope as shown below, it will not affect the next text.

    ...
    {
       ok('good=bad' =~ m/^.*?=.*/, 'test');
    }
    ok('test' =~ m//, 'this will failed before the previous regex match with a "?=" regex match. I have no way to reset back the previous regex change the regex engine unless I put it in its scope.');

    ...

It has something to do with the special variables below.

  $1..$3, @+, $&, $`, $', $+

=cut

use Test::More tests => 2;
use Data::Dumper;
SKIP: {
    skip 'no arguments', 1 unless (@ARGV);
    is_deeply( \@ARGV, [qw(--arg1 test --arg2)], ( join ' ', @ARGV ) );
}

#ok("test=okay" =~ /(.*?)=(.*)/, 'Matched .*?');

ok( "test" =~ m//, 'Matched' );
